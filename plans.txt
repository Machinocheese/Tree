Day 1:
Drafted a basic Object structure for a Tree, looked at a couple of Javascript supersets.

Day 2:
Write your own basic animations - main ones include vertical down.
These are just prototypes for more complex animations like a leaf drifting down.

Very useful reference: 
http://www.typescriptgames.com/HTMLCanvasAsteroids.html
Example code is in app.ts.

I managed to get canvas to be max screen size, but I ended up struggling most of the day with the Typescript inheritance syntax.
The end result is that I got something semi-working (I think), but I still have work to do in terms of animation.
The requestAnimationFrame() method is going wrong...

Day 3:
Get animation working, and see if you can read in information properly from the Tree object/class.

Animation didn't update, however, I did manage to set up the inheritance as well as obtain solid art direction in terms
of how I want my tree to ultimately look.

Day 4:
I managed to get the line tracer function as well as a method to move a circle from one place to another, leaving behind a line.

Day 5:
Plans: Get generateRoot() properly working, and see if you can start generating a base of roots.
I did manage to get generateRoot() properly working, but as I worked on the problem, I realized that there are new problems
with regards to root - as in if they should overlap or should they be parallel (more of a design choice really).

Day 6:
Plans: Optimally get a solid direction and code base in the direction you want to take root generation in. I expect this
to maybe take a few days to get correct (maybe I can use a hashMap for checking or something).

Day 7:
Managed to finally implement the method to check for line segment intersection. The concept wasn't hard, but for some reason,
it just didn't click for me.
Plans: Set up a hashMap function for map nodes, make sure randomly generated edges don't overlap w/ new methods.

Day 8:
Managed to figure out where a few intersection bugs were, but looking back, I'm not satisfied with my root implementation.
The pure random generation isn't really cutting it for me - I may have to use controlled randomness.

Day 9:
I've been thinking about keeping a list of viable circle points, and using RNG to determine which one of those points
to choose. "Collision" would be determined by just eliminating a rectangle of points.